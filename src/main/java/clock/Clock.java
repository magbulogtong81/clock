/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clock;

import java.awt.Font;
import java.awt.FontFormatException;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author unknown
 */
public class Clock extends javax.swing.JFrame implements Runnable {

    private Font ttfBase = null;
    private Font customFont = null;
    private InputStream myStream = null;

    private SimpleDateFormat formatter;
    private Date date;

    /**
     * this will get the custom digital Font from path.
     *
     * @param fontSize the size of font
     * @return customFont from the path font
     *
     *
     */
    

    private Font createFont(int fontSize) {


        try {
            URL path = this.getClass().getClassLoader().getResource("digital.ttf");
            Path FONT_PATH= Paths.get(path.toURI());
System.out.println(FONT_PATH.toAbsolutePath().toString());
            myStream = new BufferedInputStream(
                    new FileInputStream(FONT_PATH.toString()));
            ttfBase = Font.createFont(Font.TRUETYPE_FONT, myStream);
            customFont = ttfBase.deriveFont(Font.PLAIN, fontSize);
        } catch (FontFormatException | IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (URISyntaxException ex) {
            Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
        }
        return customFont;
    }


    /**
     * Creates new form Clock
     *
     * @throws java.net.URISyntaxException
     */
    public Clock() throws URISyntaxException {
        
        //debug

        
        initComponents();
        test();
    }
    public void test(){
        try {
            URI uri = this.getClass().getResource(".").toURI();
            
            FileSystem filesystem = FileSystems.getDefault();
            Path projectPath = Paths.get(uri);
            
            Path aboslutepath = projectPath.toAbsolutePath();
            Path resource = aboslutepath.resolve("");
            Path FONT_PATH = filesystem.getPath(resource.toString());
            System.out.println(FONT_PATH.toAbsolutePath().toString());
        } catch (URISyntaxException ex) {
            Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        hrTypeLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setForeground(new java.awt.Color(1, 1, 1));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        timeLabel.setFont(createFont(64));
        timeLabel.setForeground(new java.awt.Color(1, 1, 1));
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setText("00:00:00 ");
        jPanel1.add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 190, 230, 100));

        hrTypeLabel.setFont(createFont(24));
        hrTypeLabel.setForeground(new java.awt.Color(1, 1, 1));
        hrTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hrTypeLabel.setText("AM");
        jPanel1.add(hrTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 200, -1, 20));

        dateLabel.setFont(createFont(48));
        dateLabel.setForeground(new java.awt.Color(1, 1, 1));
        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateLabel.setText("January 01, 1990");
        jPanel1.add(dateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 290, 380, 70));

        background.setBackground(new java.awt.Color(1, 1, 1));
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/home-television-living-room.jpg"))); // NOI18N
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 630));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //print classpath
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                Clock clock;

                clock = new Clock();
                clock.setVisible(true);
                Thread tt = new Thread(clock);
                tt.start();
            } catch (URISyntaxException ex) {
                Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel hrTypeLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * acquire the current time with the following format
     *
     * @return Time with format: hh:mm:ss
     */
    private String getTime() {
        formatter = new SimpleDateFormat("hh:mm:ss");
        date = new Date();

        String time = String.valueOf(formatter.format(date));
        return time;

    }

    /**
     * returns a String if the time is AM or PM.
     *
     * @return String to determine if it is AM or PM
     */
    private String getHrType() {
        formatter = new SimpleDateFormat("aa");
        date = new Date();

        String time = String.valueOf(formatter.format(date));
        return time;
    }

    /**
     * returns the current time with following format: MMMM dd, yyyy
     *
     * @return String with current time
     */
    private String getDate() {
        formatter = new SimpleDateFormat("MMMM dd, yyyy");
        date = new Date();

        String time = String.valueOf(formatter.format(date));
        return time;
    }

    @Override
    public void run() {
        timeLabel.setText(getTime());
        hrTypeLabel.setText(getHrType());
        dateLabel.setText(getDate());
        try {
            while (true) {
                Thread.sleep(1000);
                timeLabel.setText(getTime());
            }
        } catch (InterruptedException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
}
